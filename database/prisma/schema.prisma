generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum TokenTypes {
  MagicLogin
  Refresh
  ConfirmEmail
  ResetPassword
  InviteUser
}

enum CustomFieldTypes {
  String
  Int
  Boolean
  JSON
}

enum CustomFieldRelationsTypes {
  User
  CMS
}

enum ProjectConfigRelationTypes {
  CustomFields
  UserRoles
}

enum EmailTemplates {
  Welcome
  MagicLink
  ConfirmEmail
  ForgotPassword
  Invite
}

enum AuthProviders {
  MagicLogin
  EmailAndPassword
}

enum CustomDomainStatus {
  Verifying
  Verified
  Failed
}

enum SubscriptionStatus {
  Active
  Cancelled
}

enum UserDataType {
  Internal
  Metadata
}

model AppData {
  id        Int      @id @default(autoincrement())
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("app_data")
}

model User {
  id             String    @id @default(uuid())
  fullName       String?
  email          String
  profilePicture String?
  password       String?
  lastSignIn     DateTime?
  // This key is used to compose the JWT token
  authKey        String?
  thonLabsUser   Boolean   @default(false)
  active         Boolean   @default(true)
  emailConfirmed Boolean   @default(false)
  invitedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String?
  role          Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId        String?
  projects      Project[]
  userData      UserData[]

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model UserData {
  id        Int          @id @default(autoincrement())
  key       String
  value     Json
  userId    String
  type      UserDataType @default(Internal)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_data")
}

model Project {
  id                  String                       @id
  appName             String
  active              Boolean                      @default(true)
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  userOwner           User                         @relation(fields: [userOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userOwnerId         String
  main                Boolean                      @default(false)
  environments        Environment[]
  environmentsConfigs ProjectConfigOnEnvironment[]

  @@map("projects")
}

model CustomField {
  // This ID is connected to ProjectConfigOnEnvironment
  id           String                    @id @default(uuid())
  name         String
  type         CustomFieldTypes
  relationType CustomFieldRelationsTypes

  @@map("custom_fields")
}

model Role {
  // This ID is connected to ProjectConfigOnEnvironment
  id    String @id
  name  String
  users User[]

  @@map("roles")
}

model Environment {
  id                            String              @id
  name                          String
  active                        Boolean             @default(true)
  publicKey                     String              @unique
  secretKey                     String              @unique
  tokenExpiration               String              @default("1d")
  refreshTokenExpiration        String?             @default("10d")
  appURL                        String?
  authProvider                  AuthProviders       @default(MagicLogin)
  createdAt                     DateTime            @default(now())
  updatedAt                     DateTime            @updatedAt
  customDomain                  String?
  customDomainStartValidationAt DateTime?
  customDomainLastValidationAt  DateTime?
  customDomainStatus            CustomDomainStatus?
  customDomainTXT               String?
  customDomainTXTStatus         CustomDomainStatus?

  project         Project                      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId       String
  users           User[]
  projectConfigs  ProjectConfigOnEnvironment[]
  emailsTemplates EmailTemplate[]
  tokens          TokenStorage[]
  environmentData EnvironmentData[]
  organizations   Organization[]

  @@map("environments")
}

model Organization {
  id            String   @id @default(uuid())
  name          String
  domains       Json     @default("[]")
  logo          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  active        Boolean  @default(true)
  environmentId String

  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users       User[]

  @@map("organizations")
}

model EnvironmentData {
  id            Int      @id @default(autoincrement())
  key           String
  value         Json
  environmentId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("environment_data")
}

model ProjectConfigOnEnvironment {
  id            String  @default(uuid())
  environmentId String
  active        Boolean @default(true)
  projectId     String

  // Relation connected to Roles and Custom Fields
  relationId   String
  relationType ProjectConfigRelationTypes

  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([environmentId, projectId])
  @@map("projects_configs_on_environments")
}

model EmailTemplate {
  id            String         @id @default(uuid())
  type          EmailTemplates
  name          String
  subject       String
  fromName      String
  fromEmail     String
  content       String         @db.Text
  contentJSON   Json?
  bodyStyles    Json?
  preview       String?
  replyTo       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  enabled       Boolean        @default(true)
  environment   Environment    @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  @@map("emails_templates")
}

model TokenStorage {
  token      String     @id
  expires    DateTime
  createdAt  DateTime   @default(now())
  type       TokenTypes
  // Relation ID can be user ID or any other ID that's related to the token
  // and it's necesasry to complete some action.
  relationId String

  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String?

  @@map("tokens_storage")
}
